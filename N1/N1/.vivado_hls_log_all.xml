<?xml version="1.0" encoding="UTF-8"?>
<vivadoHLSLog:LogRoot xmlns:vivadoHLSLog="www.xilinx.com/vivadoHLSLog">
  <errorLogs>
    <logs>
      <synLog>
        <logs message="ERROR: [HLS 200-70] Compilation errors found: In file included from N1.cpp:1:&#xD;&#xA;N1.cpp:18:31: error: use of overloaded operator '+=' is ambiguous (with operand types 'FixedPoint' (aka 'ap_fixed&lt;16, 7, AP_RND>') and 'float')&#xD;&#xA;                    sum[j][k] += powf(input[j][k][i], 2);&#xD;&#xA;                    ~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~&#xD;&#xA;...&#xD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2212:6083: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (&#xD;&#xA;false)>::mult operator *( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator &amp;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I&#xD;&#xA;, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (1), (1), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _&#xD;&#xA;AP_O, _AP_N>&amp; op, bool i_op) { return op.operator +=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) {&#xD;&#xA; return op.operator ^=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_&#xD;&#xA;AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ==(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator !=(ap_fixed_base&lt;(1), (1), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base&lt;_AP_W,&#xD;&#xA; _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(1), (1), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2213:6371: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__&#xD;&#xA;((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator &amp;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::log&#xD;&#xA;ic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (CHAR_IS_SIGNED)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &#xD;&#xA;&lt;&lt;(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { re&#xD;&#xA;turn op.operator |=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xD;&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template &lt;int&#xD;&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xA;                                                                                                                                                                                                                                        ^&#xD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2214:6163: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::te&#xD;&#xA;mplate RType&lt; (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator &amp;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |(ap_fixed_base&lt;(8)&#xD;&#xA;, (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,&#xD;&#xA; _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;(op); } template&#xD;&#xA; &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), &#xD;&#xA;(true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xA;                        ^&#xD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2215:6227: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_&#xD;&#xA;W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator &amp;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_o&#xD;&#xA;p) { return op.operator |(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (8), (8), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline &#xD;&#xA;__attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator +=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xD;&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ==(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fix&#xD;&#xA;ed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator !=(ap_fixed_base&lt;(8), (8), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(8), (8), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xA;                                                                                        ^&#xD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2216:6873: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *(ap_fixed_bas&#xD;&#xA;e&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &amp;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( co&#xD;&#xA;nst ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q&#xD;&#xA;_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } templa&#xD;&#xA;te &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( short i_op, const&#xD;&#xA; ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xxD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2217:7049: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, un&#xD;&#xA;signed short i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_S&#xD;&#xA;IZE_short), (false)>::logic operator &amp;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __&#xD;&#xA;attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode &#xD;&#xA;_AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const a&#xD;&#xA;p_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xxD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2218:6717: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op&#xD;&#xA;)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &amp;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator&#xD;&#xA; &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); }&#xD;&#xA; template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP&#xD;&#xA;_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; o&#xD;&#xA;p) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __at&#xD;&#xA;tribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xxD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2219:6893: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *(ap_f&#xD;&#xA;ixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &amp;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _&#xD;&#xA;AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs oper&#xD;&#xA;ator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;in&#xD;&#xA;t _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >(ap_fixe&#xD;&#xA;d_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP&#xD;&#xA;_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xxD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2220:6795: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP&#xD;&#xA;_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &amp;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_S&#xD;&#xA;IZE_long), (_AP_SIZE_long), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_&#xD;&#xA;op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_ba&#xD;&#xA;se&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((a&#xD;&#xA;lways_inline)) bool operator >( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)&#xD;&#xA;>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }&#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xxD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^&#xD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2221:6971: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { re&#xD;&#xA;turn op.operator *(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &amp;( unsigne&#xD;&#xA;d long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_&#xD;&#xA;S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.o&#xD;&#xA;perator /=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixe&#xD;&#xA;d_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_A&#xD;&#xA;P_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xxD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2222:7107: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, &#xD;&#xA;_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::temp&#xD;&#xA;late RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &amp;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S&#xD;&#xA;, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;i&#xD;&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xD;&#xA;ys_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }&#xD;&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xD;&#xxD;&#xxD;&#xxD;&#xA;E:/Vivado/Vivado/2018.3/common/technology/autopilot\ap_fixed_base.h:2223:7139: note: candidate function [with _AP_W = 16, _AP_I = 7, _AP_S = true, _AP_Q = 0, _AP_O = 3, _AP_N = 0]&#xD;&#xA;template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S&#xD;&#xA;, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _&#xD;&#xA;AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &amp;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &amp;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template &lt;int &#xD;&#xA;_AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W, _AP_I, _AP_S>::template RType&lt; (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator &lt;&lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator +=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator +=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator -=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator *=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alw&#xD;&#xA;ays_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator /=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &amp;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator |=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator ^=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator >>=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>=(ap_int_base&lt;(_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; operator &lt;&lt;=( ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;=(ap_int_base&lt;(_AP_SIZE_&#xD;&#xA;ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mo&#xD;&#xA;de _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &lt;=(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ==(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator !=(ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template &lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base&lt;_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }&#xD;&#xxD;&#xxD;&#xxD;&#xxD;&#xA;1 error generated.&#xD;&#xA;Failed during preprocessing.&#xD;&#xA;    while executing&#xD;&#xA;&quot;source E:/Martina/Senior2/ML/AlexNet/N1/N1/solution1/csynth.tcl&quot;&#xD;&#xA;    invoked from within&#xD;&#xA;&quot;hls::main E:/Martina/Senior2/ML/AlexNet/N1/N1/solution1/csynth.tcl&quot;&#xD;&#xA;    (&quot;uplevel&quot; body line 1)&#xD;&#xA;    invoked from within&#xD;&#xA;&quot;uplevel 1 hls::main {*}$args&quot;&#xD;&#xA;    (procedure &quot;hls_proc&quot; line 5)&#xD;&#xA;    invoked from within&#xD;&#xA;&quot;hls_proc $argv&quot;&#xD;&#xA;" projectName="N1" solutionName="solution1" date="2023-12-30T09:24:00.253+0200"/>
      </synLog>
      <simLog/>
      <mgLog/>
      <packageLog/>
      <csimLog/>
    </logs>
  </errorLogs>
  <warningLogs>
    <logs>
      <synLog/>
      <simLog/>
      <mgLog/>
      <packageLog/>
      <csimLog/>
    </logs>
  </warningLogs>
</vivadoHLSLog:LogRoot>
