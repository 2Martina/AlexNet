// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fullyConnected.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fullyConnected::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fullyConnected::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> fullyConnected::ap_ST_fsm_state1 = "1";
const sc_lv<11> fullyConnected::ap_ST_fsm_state2 = "10";
const sc_lv<11> fullyConnected::ap_ST_fsm_state3 = "100";
const sc_lv<11> fullyConnected::ap_ST_fsm_state4 = "1000";
const sc_lv<11> fullyConnected::ap_ST_fsm_state5 = "10000";
const sc_lv<11> fullyConnected::ap_ST_fsm_state6 = "100000";
const sc_lv<11> fullyConnected::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> fullyConnected::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> fullyConnected::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> fullyConnected::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> fullyConnected::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> fullyConnected::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fullyConnected::ap_const_lv32_1 = "1";
const sc_lv<32> fullyConnected::ap_const_lv32_2 = "10";
const sc_lv<1> fullyConnected::ap_const_lv1_0 = "0";
const sc_lv<32> fullyConnected::ap_const_lv32_3 = "11";
const sc_lv<1> fullyConnected::ap_const_lv1_1 = "1";
const sc_lv<32> fullyConnected::ap_const_lv32_5 = "101";
const sc_lv<32> fullyConnected::ap_const_lv32_6 = "110";
const sc_lv<32> fullyConnected::ap_const_lv32_7 = "111";
const sc_lv<32> fullyConnected::ap_const_lv32_9 = "1001";
const sc_lv<13> fullyConnected::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> fullyConnected::ap_const_lv32_A = "1010";
const sc_lv<32> fullyConnected::ap_const_lv32_8 = "1000";
const sc_lv<14> fullyConnected::ap_const_lv14_0 = "00000000000000";
const sc_lv<16> fullyConnected::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> fullyConnected::ap_const_lv32_4 = "100";
const sc_lv<13> fullyConnected::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> fullyConnected::ap_const_lv13_1 = "1";
const sc_lv<14> fullyConnected::ap_const_lv14_2400 = "10010000000000";
const sc_lv<14> fullyConnected::ap_const_lv14_1 = "1";
const sc_lv<12> fullyConnected::ap_const_lv12_0 = "000000000000";
const sc_lv<9> fullyConnected::ap_const_lv9_0 = "000000000";
const sc_lv<32> fullyConnected::ap_const_lv32_18 = "11000";
const sc_lv<15> fullyConnected::ap_const_lv15_0 = "000000000000000";
const bool fullyConnected::ap_const_boolean_1 = true;

fullyConnected::fullyConnected(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fullyConnected_mubkb_U1 = new fullyConnected_mubkb<1,1,16,16,32>("fullyConnected_mubkb_U1");
    fullyConnected_mubkb_U1->din0(input_V_load_reg_375);
    fullyConnected_mubkb_U1->din1(weights_V_load_reg_380);
    fullyConnected_mubkb_U1->dout(r_V_2_fu_313_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_167_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_167_p2 );

    SC_METHOD(thread_bias_V_address0);
    sensitive << ( tmp_2_reg_337 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_bias_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond1_fu_150_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_116 );

    SC_METHOD(thread_exitcond2_fu_167_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i1_reg_127 );

    SC_METHOD(thread_exitcond_fu_188_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_reg_138 );

    SC_METHOD(thread_i_1_fu_156_p2);
    sensitive << ( i_reg_116 );

    SC_METHOD(thread_i_2_fu_173_p2);
    sensitive << ( i1_reg_127 );

    SC_METHOD(thread_input_V_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_7_fu_222_p1 );

    SC_METHOD(thread_input_V_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_j_1_fu_194_p2);
    sensitive << ( j_reg_138 );

    SC_METHOD(thread_lhs_V_fu_243_p3);
    sensitive << ( p_Val2_2_reg_385 );

    SC_METHOD(thread_output_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( output_V_addr_1_reg_347 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_fu_162_p1 );

    SC_METHOD(thread_output_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_output_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( p_Val2_6_fu_268_p2 );
    sensitive << ( ret_V_2_cast_6_fu_309_p1 );

    SC_METHOD(thread_output_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_p_Val2_5_fu_255_p4);
    sensitive << ( ret_V_fu_250_p2 );

    SC_METHOD(thread_p_Val2_6_fu_268_p2);
    sensitive << ( p_Val2_5_fu_255_p4 );
    sensitive << ( tmp_9_cast_fu_265_p1 );

    SC_METHOD(thread_ret_V_2_cast_6_fu_309_p1);
    sensitive << ( ret_V_2_s_reg_400 );

    SC_METHOD(thread_ret_V_2_cast_fu_289_p2);
    sensitive << ( tmp_4_fu_279_p1 );
    sensitive << ( tmp_1_fu_275_p1 );

    SC_METHOD(thread_ret_V_2_fu_283_p2);
    sensitive << ( output_V_q0 );
    sensitive << ( bias_V_q0 );

    SC_METHOD(thread_ret_V_2_s_fu_301_p3);
    sensitive << ( tmp_6_fu_295_p2 );
    sensitive << ( ret_V_2_cast_fu_289_p2 );

    SC_METHOD(thread_ret_V_fu_250_p2);
    sensitive << ( tmp_5_reg_390 );
    sensitive << ( lhs_V_fu_243_p3 );

    SC_METHOD(thread_tmp_1_fu_275_p1);
    sensitive << ( output_V_q0 );

    SC_METHOD(thread_tmp_2_cast_fu_184_p1);
    sensitive << ( i1_reg_127 );

    SC_METHOD(thread_tmp_2_fu_179_p1);
    sensitive << ( i1_reg_127 );

    SC_METHOD(thread_tmp_3_fu_200_p3);
    sensitive << ( j_reg_138 );

    SC_METHOD(thread_tmp_4_fu_279_p1);
    sensitive << ( bias_V_q0 );

    SC_METHOD(thread_tmp_5_cast_fu_208_p1);
    sensitive << ( tmp_3_fu_200_p3 );

    SC_METHOD(thread_tmp_5_fu_233_p1);
    sensitive << ( r_V_2_fu_313_p2 );

    SC_METHOD(thread_tmp_6_fu_295_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ret_V_2_fu_283_p2 );

    SC_METHOD(thread_tmp_7_fu_222_p1);
    sensitive << ( j_reg_138 );

    SC_METHOD(thread_tmp_9_cast1_fu_217_p1);
    sensitive << ( tmp_9_fu_212_p2 );

    SC_METHOD(thread_tmp_9_cast_fu_265_p1);
    sensitive << ( tmp_10_reg_395 );

    SC_METHOD(thread_tmp_9_fu_212_p2);
    sensitive << ( tmp_2_cast_reg_342 );
    sensitive << ( tmp_5_cast_fu_208_p1 );

    SC_METHOD(thread_tmp_fu_162_p1);
    sensitive << ( i_reg_116 );

    SC_METHOD(thread_weights_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_9_cast1_fu_217_p1 );

    SC_METHOD(thread_weights_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_167_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_188_p2 );
    sensitive << ( exitcond1_fu_150_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fullyConnected_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V_address0, "(port)input_V_address0");
    sc_trace(mVcdFile, input_V_ce0, "(port)input_V_ce0");
    sc_trace(mVcdFile, input_V_q0, "(port)input_V_q0");
    sc_trace(mVcdFile, output_V_address0, "(port)output_V_address0");
    sc_trace(mVcdFile, output_V_ce0, "(port)output_V_ce0");
    sc_trace(mVcdFile, output_V_we0, "(port)output_V_we0");
    sc_trace(mVcdFile, output_V_d0, "(port)output_V_d0");
    sc_trace(mVcdFile, output_V_q0, "(port)output_V_q0");
    sc_trace(mVcdFile, weights_V_address0, "(port)weights_V_address0");
    sc_trace(mVcdFile, weights_V_ce0, "(port)weights_V_ce0");
    sc_trace(mVcdFile, weights_V_q0, "(port)weights_V_q0");
    sc_trace(mVcdFile, bias_V_address0, "(port)bias_V_address0");
    sc_trace(mVcdFile, bias_V_ce0, "(port)bias_V_ce0");
    sc_trace(mVcdFile, bias_V_q0, "(port)bias_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_156_p2, "i_1_fu_156_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_2_fu_173_p2, "i_2_fu_173_p2");
    sc_trace(mVcdFile, i_2_reg_332, "i_2_reg_332");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_179_p1, "tmp_2_fu_179_p1");
    sc_trace(mVcdFile, tmp_2_reg_337, "tmp_2_reg_337");
    sc_trace(mVcdFile, exitcond2_fu_167_p2, "exitcond2_fu_167_p2");
    sc_trace(mVcdFile, tmp_2_cast_fu_184_p1, "tmp_2_cast_fu_184_p1");
    sc_trace(mVcdFile, tmp_2_cast_reg_342, "tmp_2_cast_reg_342");
    sc_trace(mVcdFile, output_V_addr_1_reg_347, "output_V_addr_1_reg_347");
    sc_trace(mVcdFile, j_1_fu_194_p2, "j_1_fu_194_p2");
    sc_trace(mVcdFile, j_1_reg_355, "j_1_reg_355");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond_fu_188_p2, "exitcond_fu_188_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, input_V_load_reg_375, "input_V_load_reg_375");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, weights_V_load_reg_380, "weights_V_load_reg_380");
    sc_trace(mVcdFile, p_Val2_2_reg_385, "p_Val2_2_reg_385");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_5_fu_233_p1, "tmp_5_fu_233_p1");
    sc_trace(mVcdFile, tmp_5_reg_390, "tmp_5_reg_390");
    sc_trace(mVcdFile, tmp_10_reg_395, "tmp_10_reg_395");
    sc_trace(mVcdFile, ret_V_2_s_fu_301_p3, "ret_V_2_s_fu_301_p3");
    sc_trace(mVcdFile, ret_V_2_s_reg_400, "ret_V_2_s_reg_400");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_reg_116, "i_reg_116");
    sc_trace(mVcdFile, exitcond1_fu_150_p2, "exitcond1_fu_150_p2");
    sc_trace(mVcdFile, i1_reg_127, "i1_reg_127");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, j_reg_138, "j_reg_138");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_fu_162_p1, "tmp_fu_162_p1");
    sc_trace(mVcdFile, tmp_9_cast1_fu_217_p1, "tmp_9_cast1_fu_217_p1");
    sc_trace(mVcdFile, tmp_7_fu_222_p1, "tmp_7_fu_222_p1");
    sc_trace(mVcdFile, p_Val2_6_fu_268_p2, "p_Val2_6_fu_268_p2");
    sc_trace(mVcdFile, ret_V_2_cast_6_fu_309_p1, "ret_V_2_cast_6_fu_309_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_3_fu_200_p3, "tmp_3_fu_200_p3");
    sc_trace(mVcdFile, tmp_5_cast_fu_208_p1, "tmp_5_cast_fu_208_p1");
    sc_trace(mVcdFile, tmp_9_fu_212_p2, "tmp_9_fu_212_p2");
    sc_trace(mVcdFile, r_V_2_fu_313_p2, "r_V_2_fu_313_p2");
    sc_trace(mVcdFile, lhs_V_fu_243_p3, "lhs_V_fu_243_p3");
    sc_trace(mVcdFile, ret_V_fu_250_p2, "ret_V_fu_250_p2");
    sc_trace(mVcdFile, p_Val2_5_fu_255_p4, "p_Val2_5_fu_255_p4");
    sc_trace(mVcdFile, tmp_9_cast_fu_265_p1, "tmp_9_cast_fu_265_p1");
    sc_trace(mVcdFile, tmp_4_fu_279_p1, "tmp_4_fu_279_p1");
    sc_trace(mVcdFile, tmp_1_fu_275_p1, "tmp_1_fu_275_p1");
    sc_trace(mVcdFile, ret_V_2_fu_283_p2, "ret_V_2_fu_283_p2");
    sc_trace(mVcdFile, tmp_6_fu_295_p2, "tmp_6_fu_295_p2");
    sc_trace(mVcdFile, ret_V_2_cast_fu_289_p2, "ret_V_2_cast_fu_289_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fullyConnected.hdltvin.dat");
    mHdltvoutHandle.open("fullyConnected.hdltvout.dat");
}

fullyConnected::~fullyConnected() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fullyConnected_mubkb_U1;
}

void fullyConnected::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_150_p2.read()))) {
        i1_reg_127 = ap_const_lv13_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i1_reg_127 = i_2_reg_332.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_150_p2.read()))) {
        i_reg_116 = i_1_fu_156_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_116 = ap_const_lv13_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_167_p2.read(), ap_const_lv1_0))) {
        j_reg_138 = ap_const_lv14_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_reg_138 = j_1_reg_355.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_2_reg_332 = i_2_fu_173_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        input_V_load_reg_375 = input_V_q0.read();
        weights_V_load_reg_380 = weights_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_1_reg_355 = j_1_fu_194_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_167_p2.read(), ap_const_lv1_0))) {
        output_V_addr_1_reg_347 =  (sc_lv<12>) (tmp_2_fu_179_p1.read());
        tmp_2_cast_reg_342 = tmp_2_cast_fu_184_p1.read();
        tmp_2_reg_337 = tmp_2_fu_179_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        p_Val2_2_reg_385 = output_V_q0.read();
        tmp_10_reg_395 = r_V_2_fu_313_p2.read().range(8, 8);
        tmp_5_reg_390 = tmp_5_fu_233_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ret_V_2_s_reg_400 = ret_V_2_s_fu_301_p3.read();
    }
}

void fullyConnected::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fullyConnected::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fullyConnected::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void fullyConnected::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fullyConnected::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fullyConnected::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fullyConnected::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fullyConnected::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fullyConnected::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void fullyConnected::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fullyConnected::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fullyConnected::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_167_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fullyConnected::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fullyConnected::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_167_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fullyConnected::thread_bias_V_address0() {
    bias_V_address0 =  (sc_lv<12>) (tmp_2_reg_337.read());
}

void fullyConnected::thread_bias_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        bias_V_ce0 = ap_const_logic_1;
    } else {
        bias_V_ce0 = ap_const_logic_0;
    }
}

void fullyConnected::thread_exitcond1_fu_150_p2() {
    exitcond1_fu_150_p2 = (!i_reg_116.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_116.read() == ap_const_lv13_1000);
}

void fullyConnected::thread_exitcond2_fu_167_p2() {
    exitcond2_fu_167_p2 = (!i1_reg_127.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_127.read() == ap_const_lv13_1000);
}

void fullyConnected::thread_exitcond_fu_188_p2() {
    exitcond_fu_188_p2 = (!j_reg_138.read().is_01() || !ap_const_lv14_2400.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_138.read() == ap_const_lv14_2400);
}

void fullyConnected::thread_i_1_fu_156_p2() {
    i_1_fu_156_p2 = (!i_reg_116.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(i_reg_116.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void fullyConnected::thread_i_2_fu_173_p2() {
    i_2_fu_173_p2 = (!i1_reg_127.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(i1_reg_127.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void fullyConnected::thread_input_V_address0() {
    input_V_address0 =  (sc_lv<14>) (tmp_7_fu_222_p1.read());
}

void fullyConnected::thread_input_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        input_V_ce0 = ap_const_logic_1;
    } else {
        input_V_ce0 = ap_const_logic_0;
    }
}

void fullyConnected::thread_j_1_fu_194_p2() {
    j_1_fu_194_p2 = (!j_reg_138.read().is_01() || !ap_const_lv14_1.is_01())? sc_lv<14>(): (sc_biguint<14>(j_reg_138.read()) + sc_biguint<14>(ap_const_lv14_1));
}

void fullyConnected::thread_lhs_V_fu_243_p3() {
    lhs_V_fu_243_p3 = esl_concat<16,9>(p_Val2_2_reg_385.read(), ap_const_lv9_0);
}

void fullyConnected::thread_output_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        output_V_address0 = output_V_addr_1_reg_347.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_V_address0 =  (sc_lv<12>) (tmp_fu_162_p1.read());
    } else {
        output_V_address0 = "XXXXXXXXXXXX";
    }
}

void fullyConnected::thread_output_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        output_V_ce0 = ap_const_logic_1;
    } else {
        output_V_ce0 = ap_const_logic_0;
    }
}

void fullyConnected::thread_output_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        output_V_d0 = ret_V_2_cast_6_fu_309_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        output_V_d0 = p_Val2_6_fu_268_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_V_d0 = ap_const_lv16_0;
    } else {
        output_V_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void fullyConnected::thread_output_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_150_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        output_V_we0 = ap_const_logic_1;
    } else {
        output_V_we0 = ap_const_logic_0;
    }
}

void fullyConnected::thread_p_Val2_5_fu_255_p4() {
    p_Val2_5_fu_255_p4 = ret_V_fu_250_p2.read().range(24, 9);
}

void fullyConnected::thread_p_Val2_6_fu_268_p2() {
    p_Val2_6_fu_268_p2 = (!p_Val2_5_fu_255_p4.read().is_01() || !tmp_9_cast_fu_265_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_Val2_5_fu_255_p4.read()) + sc_biguint<16>(tmp_9_cast_fu_265_p1.read()));
}

void fullyConnected::thread_ret_V_2_cast_6_fu_309_p1() {
    ret_V_2_cast_6_fu_309_p1 = esl_zext<16,15>(ret_V_2_s_reg_400.read());
}

void fullyConnected::thread_ret_V_2_cast_fu_289_p2() {
    ret_V_2_cast_fu_289_p2 = (!tmp_4_fu_279_p1.read().is_01() || !tmp_1_fu_275_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(tmp_4_fu_279_p1.read()) + sc_biguint<15>(tmp_1_fu_275_p1.read()));
}

void fullyConnected::thread_ret_V_2_fu_283_p2() {
    ret_V_2_fu_283_p2 = (!output_V_q0.read().is_01() || !bias_V_q0.read().is_01())? sc_lv<16>(): (sc_biguint<16>(output_V_q0.read()) + sc_biguint<16>(bias_V_q0.read()));
}

void fullyConnected::thread_ret_V_2_s_fu_301_p3() {
    ret_V_2_s_fu_301_p3 = (!tmp_6_fu_295_p2.read()[0].is_01())? sc_lv<15>(): ((tmp_6_fu_295_p2.read()[0].to_bool())? ret_V_2_cast_fu_289_p2.read(): ap_const_lv15_0);
}

void fullyConnected::thread_ret_V_fu_250_p2() {
    ret_V_fu_250_p2 = (!tmp_5_reg_390.read().is_01() || !lhs_V_fu_243_p3.read().is_01())? sc_lv<25>(): (sc_biguint<25>(tmp_5_reg_390.read()) + sc_biguint<25>(lhs_V_fu_243_p3.read()));
}

void fullyConnected::thread_tmp_1_fu_275_p1() {
    tmp_1_fu_275_p1 = output_V_q0.read().range(15-1, 0);
}

void fullyConnected::thread_tmp_2_cast_fu_184_p1() {
    tmp_2_cast_fu_184_p1 = esl_zext<27,13>(i1_reg_127.read());
}

void fullyConnected::thread_tmp_2_fu_179_p1() {
    tmp_2_fu_179_p1 = esl_zext<64,13>(i1_reg_127.read());
}

void fullyConnected::thread_tmp_3_fu_200_p3() {
    tmp_3_fu_200_p3 = esl_concat<14,12>(j_reg_138.read(), ap_const_lv12_0);
}

void fullyConnected::thread_tmp_4_fu_279_p1() {
    tmp_4_fu_279_p1 = bias_V_q0.read().range(15-1, 0);
}

void fullyConnected::thread_tmp_5_cast_fu_208_p1() {
    tmp_5_cast_fu_208_p1 = esl_zext<27,26>(tmp_3_fu_200_p3.read());
}

void fullyConnected::thread_tmp_5_fu_233_p1() {
    tmp_5_fu_233_p1 = r_V_2_fu_313_p2.read().range(25-1, 0);
}

void fullyConnected::thread_tmp_6_fu_295_p2() {
    tmp_6_fu_295_p2 = (!ret_V_2_fu_283_p2.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): (sc_bigint<16>(ret_V_2_fu_283_p2.read()) > sc_bigint<16>(ap_const_lv16_0));
}

void fullyConnected::thread_tmp_7_fu_222_p1() {
    tmp_7_fu_222_p1 = esl_zext<64,14>(j_reg_138.read());
}

void fullyConnected::thread_tmp_9_cast1_fu_217_p1() {
    tmp_9_cast1_fu_217_p1 = esl_zext<64,27>(tmp_9_fu_212_p2.read());
}

void fullyConnected::thread_tmp_9_cast_fu_265_p1() {
    tmp_9_cast_fu_265_p1 = esl_zext<16,1>(tmp_10_reg_395.read());
}

void fullyConnected::thread_tmp_9_fu_212_p2() {
    tmp_9_fu_212_p2 = (!tmp_5_cast_fu_208_p1.read().is_01() || !tmp_2_cast_reg_342.read().is_01())? sc_lv<27>(): (sc_biguint<27>(tmp_5_cast_fu_208_p1.read()) + sc_biguint<27>(tmp_2_cast_reg_342.read()));
}

void fullyConnected::thread_tmp_fu_162_p1() {
    tmp_fu_162_p1 = esl_zext<64,13>(i_reg_116.read());
}

void fullyConnected::thread_weights_V_address0() {
    weights_V_address0 =  (sc_lv<26>) (tmp_9_cast1_fu_217_p1.read());
}

void fullyConnected::thread_weights_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        weights_V_ce0 = ap_const_logic_1;
    } else {
        weights_V_ce0 = ap_const_logic_0;
    }
}

void fullyConnected::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_150_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_167_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_188_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

void fullyConnected::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_address0\" :  \"" << input_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_V_ce0\" :  \"" << input_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V_q0\" :  \"" << input_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_address0\" :  \"" << output_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_ce0\" :  \"" << output_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_we0\" :  \"" << output_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_V_d0\" :  \"" << output_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_V_q0\" :  \"" << output_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_V_address0\" :  \"" << weights_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"weights_V_ce0\" :  \"" << weights_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"weights_V_q0\" :  \"" << weights_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bias_V_address0\" :  \"" << bias_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bias_V_ce0\" :  \"" << bias_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bias_V_q0\" :  \"" << bias_V_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

