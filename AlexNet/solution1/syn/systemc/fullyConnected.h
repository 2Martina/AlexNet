// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fullyConnected_HH_
#define _fullyConnected_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fullyConnected_mubkb.h"

namespace ap_rtl {

struct fullyConnected : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > input_V_address0;
    sc_out< sc_logic > input_V_ce0;
    sc_in< sc_lv<16> > input_V_q0;
    sc_out< sc_lv<12> > output_V_address0;
    sc_out< sc_logic > output_V_ce0;
    sc_out< sc_logic > output_V_we0;
    sc_out< sc_lv<16> > output_V_d0;
    sc_in< sc_lv<16> > output_V_q0;
    sc_out< sc_lv<26> > weights_V_address0;
    sc_out< sc_logic > weights_V_ce0;
    sc_in< sc_lv<16> > weights_V_q0;
    sc_out< sc_lv<12> > bias_V_address0;
    sc_out< sc_logic > bias_V_ce0;
    sc_in< sc_lv<16> > bias_V_q0;


    // Module declarations
    fullyConnected(sc_module_name name);
    SC_HAS_PROCESS(fullyConnected);

    ~fullyConnected();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fullyConnected_mubkb<1,1,16,16,32>* fullyConnected_mubkb_U1;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<13> > i_1_fu_156_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<13> > i_2_fu_173_p2;
    sc_signal< sc_lv<13> > i_2_reg_332;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_2_fu_179_p1;
    sc_signal< sc_lv<64> > tmp_2_reg_337;
    sc_signal< sc_lv<1> > exitcond2_fu_167_p2;
    sc_signal< sc_lv<27> > tmp_2_cast_fu_184_p1;
    sc_signal< sc_lv<27> > tmp_2_cast_reg_342;
    sc_signal< sc_lv<12> > output_V_addr_1_reg_347;
    sc_signal< sc_lv<14> > j_1_fu_194_p2;
    sc_signal< sc_lv<14> > j_1_reg_355;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > exitcond_fu_188_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<16> > input_V_load_reg_375;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<16> > weights_V_load_reg_380;
    sc_signal< sc_lv<16> > p_Val2_2_reg_385;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<25> > tmp_5_fu_233_p1;
    sc_signal< sc_lv<25> > tmp_5_reg_390;
    sc_signal< sc_lv<1> > tmp_10_reg_395;
    sc_signal< sc_lv<15> > ret_V_2_s_fu_301_p3;
    sc_signal< sc_lv<15> > ret_V_2_s_reg_400;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<13> > i_reg_116;
    sc_signal< sc_lv<1> > exitcond1_fu_150_p2;
    sc_signal< sc_lv<13> > i1_reg_127;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<14> > j_reg_138;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<64> > tmp_fu_162_p1;
    sc_signal< sc_lv<64> > tmp_9_cast1_fu_217_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_222_p1;
    sc_signal< sc_lv<16> > p_Val2_6_fu_268_p2;
    sc_signal< sc_lv<16> > ret_V_2_cast_6_fu_309_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<26> > tmp_3_fu_200_p3;
    sc_signal< sc_lv<27> > tmp_5_cast_fu_208_p1;
    sc_signal< sc_lv<27> > tmp_9_fu_212_p2;
    sc_signal< sc_lv<32> > r_V_2_fu_313_p2;
    sc_signal< sc_lv<25> > lhs_V_fu_243_p3;
    sc_signal< sc_lv<25> > ret_V_fu_250_p2;
    sc_signal< sc_lv<16> > p_Val2_5_fu_255_p4;
    sc_signal< sc_lv<16> > tmp_9_cast_fu_265_p1;
    sc_signal< sc_lv<15> > tmp_4_fu_279_p1;
    sc_signal< sc_lv<15> > tmp_1_fu_275_p1;
    sc_signal< sc_lv<16> > ret_V_2_fu_283_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_295_p2;
    sc_signal< sc_lv<15> > ret_V_2_cast_fu_289_p2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<14> ap_const_lv14_2400;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<15> ap_const_lv15_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bias_V_address0();
    void thread_bias_V_ce0();
    void thread_exitcond1_fu_150_p2();
    void thread_exitcond2_fu_167_p2();
    void thread_exitcond_fu_188_p2();
    void thread_i_1_fu_156_p2();
    void thread_i_2_fu_173_p2();
    void thread_input_V_address0();
    void thread_input_V_ce0();
    void thread_j_1_fu_194_p2();
    void thread_lhs_V_fu_243_p3();
    void thread_output_V_address0();
    void thread_output_V_ce0();
    void thread_output_V_d0();
    void thread_output_V_we0();
    void thread_p_Val2_5_fu_255_p4();
    void thread_p_Val2_6_fu_268_p2();
    void thread_ret_V_2_cast_6_fu_309_p1();
    void thread_ret_V_2_cast_fu_289_p2();
    void thread_ret_V_2_fu_283_p2();
    void thread_ret_V_2_s_fu_301_p3();
    void thread_ret_V_fu_250_p2();
    void thread_tmp_1_fu_275_p1();
    void thread_tmp_2_cast_fu_184_p1();
    void thread_tmp_2_fu_179_p1();
    void thread_tmp_3_fu_200_p3();
    void thread_tmp_4_fu_279_p1();
    void thread_tmp_5_cast_fu_208_p1();
    void thread_tmp_5_fu_233_p1();
    void thread_tmp_6_fu_295_p2();
    void thread_tmp_7_fu_222_p1();
    void thread_tmp_9_cast1_fu_217_p1();
    void thread_tmp_9_cast_fu_265_p1();
    void thread_tmp_9_fu_212_p2();
    void thread_tmp_fu_162_p1();
    void thread_weights_V_address0();
    void thread_weights_V_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
