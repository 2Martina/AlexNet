// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fullyConnected,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.513500,HLS_SYN_LAT=226512898,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=205,HLS_SYN_LUT=369,HLS_VERSION=2018_3}" *)

module fullyConnected (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0,
        weights_V_address0,
        weights_V_ce0,
        weights_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_V_address0;
output   input_V_ce0;
input  [15:0] input_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;
input  [15:0] output_V_q0;
output  [25:0] weights_V_address0;
output   weights_V_ce0;
input  [15:0] weights_V_q0;
output  [11:0] bias_V_address0;
output   bias_V_ce0;
input  [15:0] bias_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg[11:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[15:0] output_V_d0;
reg weights_V_ce0;
reg bias_V_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] i_1_fu_156_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] i_2_fu_173_p2;
reg   [12:0] i_2_reg_332;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_2_fu_179_p1;
reg   [63:0] tmp_2_reg_337;
wire   [0:0] exitcond2_fu_167_p2;
wire   [26:0] tmp_2_cast_fu_184_p1;
reg   [26:0] tmp_2_cast_reg_342;
reg   [11:0] output_V_addr_1_reg_347;
wire   [13:0] j_1_fu_194_p2;
reg   [13:0] j_1_reg_355;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_188_p2;
wire    ap_CS_fsm_state6;
reg  signed [15:0] input_V_load_reg_375;
wire    ap_CS_fsm_state7;
reg  signed [15:0] weights_V_load_reg_380;
reg   [15:0] p_Val2_2_reg_385;
wire    ap_CS_fsm_state8;
wire   [24:0] tmp_5_fu_233_p1;
reg   [24:0] tmp_5_reg_390;
reg   [0:0] tmp_10_reg_395;
wire   [14:0] ret_V_2_s_fu_301_p3;
reg   [14:0] ret_V_2_s_reg_400;
wire    ap_CS_fsm_state10;
reg   [12:0] i_reg_116;
wire   [0:0] exitcond1_fu_150_p2;
reg   [12:0] i1_reg_127;
wire    ap_CS_fsm_state11;
reg   [13:0] j_reg_138;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_fu_162_p1;
wire   [63:0] tmp_9_cast1_fu_217_p1;
wire   [63:0] tmp_7_fu_222_p1;
wire   [15:0] p_Val2_6_fu_268_p2;
wire   [15:0] ret_V_2_cast_6_fu_309_p1;
wire    ap_CS_fsm_state5;
wire   [25:0] tmp_3_fu_200_p3;
wire   [26:0] tmp_5_cast_fu_208_p1;
wire   [26:0] tmp_9_fu_212_p2;
wire  signed [31:0] r_V_2_fu_313_p2;
wire   [24:0] lhs_V_fu_243_p3;
wire   [24:0] ret_V_fu_250_p2;
wire   [15:0] p_Val2_5_fu_255_p4;
wire   [15:0] tmp_9_cast_fu_265_p1;
wire   [14:0] tmp_4_fu_279_p1;
wire   [14:0] tmp_1_fu_275_p1;
wire   [15:0] ret_V_2_fu_283_p2;
wire   [0:0] tmp_6_fu_295_p2;
wire   [14:0] ret_V_2_cast_fu_289_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

fullyConnected_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fullyConnected_mubkb_U1(
    .din0(input_V_load_reg_375),
    .din1(weights_V_load_reg_380),
    .dout(r_V_2_fu_313_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_127 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i1_reg_127 <= i_2_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_116 <= i_1_fu_156_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_116 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_138 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_138 <= j_1_reg_355;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_332 <= i_2_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_V_load_reg_375 <= input_V_q0;
        weights_V_load_reg_380 <= weights_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_355 <= j_1_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_V_addr_1_reg_347 <= tmp_2_fu_179_p1;
        tmp_2_cast_reg_342[12 : 0] <= tmp_2_cast_fu_184_p1[12 : 0];
        tmp_2_reg_337[12 : 0] <= tmp_2_fu_179_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_2_reg_385 <= output_V_q0;
        tmp_10_reg_395 <= r_V_2_fu_313_p2[32'd8];
        tmp_5_reg_390 <= tmp_5_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_V_2_s_reg_400 <= ret_V_2_s_fu_301_p3;
    end
end

always @ (*) begin
    if (((exitcond2_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        output_V_address0 = output_V_addr_1_reg_347;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_address0 = tmp_fu_162_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_V_d0 = ret_V_2_cast_6_fu_309_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_d0 = p_Val2_6_fu_268_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_V_d0 = 16'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | ((exitcond1_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        weights_V_ce0 = 1'b1;
    end else begin
        weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = tmp_2_reg_337;

assign exitcond1_fu_150_p2 = ((i_reg_116 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond2_fu_167_p2 = ((i1_reg_127 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_fu_188_p2 = ((j_reg_138 == 14'd9216) ? 1'b1 : 1'b0);

assign i_1_fu_156_p2 = (i_reg_116 + 13'd1);

assign i_2_fu_173_p2 = (i1_reg_127 + 13'd1);

assign input_V_address0 = tmp_7_fu_222_p1;

assign j_1_fu_194_p2 = (j_reg_138 + 14'd1);

assign lhs_V_fu_243_p3 = {{p_Val2_2_reg_385}, {9'd0}};

assign p_Val2_5_fu_255_p4 = {{ret_V_fu_250_p2[24:9]}};

assign p_Val2_6_fu_268_p2 = (p_Val2_5_fu_255_p4 + tmp_9_cast_fu_265_p1);

assign ret_V_2_cast_6_fu_309_p1 = ret_V_2_s_reg_400;

assign ret_V_2_cast_fu_289_p2 = (tmp_4_fu_279_p1 + tmp_1_fu_275_p1);

assign ret_V_2_fu_283_p2 = (output_V_q0 + bias_V_q0);

assign ret_V_2_s_fu_301_p3 = ((tmp_6_fu_295_p2[0:0] === 1'b1) ? ret_V_2_cast_fu_289_p2 : 15'd0);

assign ret_V_fu_250_p2 = (tmp_5_reg_390 + lhs_V_fu_243_p3);

assign tmp_1_fu_275_p1 = output_V_q0[14:0];

assign tmp_2_cast_fu_184_p1 = i1_reg_127;

assign tmp_2_fu_179_p1 = i1_reg_127;

assign tmp_3_fu_200_p3 = {{j_reg_138}, {12'd0}};

assign tmp_4_fu_279_p1 = bias_V_q0[14:0];

assign tmp_5_cast_fu_208_p1 = tmp_3_fu_200_p3;

assign tmp_5_fu_233_p1 = r_V_2_fu_313_p2[24:0];

assign tmp_6_fu_295_p2 = (($signed(ret_V_2_fu_283_p2) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_7_fu_222_p1 = j_reg_138;

assign tmp_9_cast1_fu_217_p1 = tmp_9_fu_212_p2;

assign tmp_9_cast_fu_265_p1 = tmp_10_reg_395;

assign tmp_9_fu_212_p2 = (tmp_5_cast_fu_208_p1 + tmp_2_cast_reg_342);

assign tmp_fu_162_p1 = i_reg_116;

assign weights_V_address0 = tmp_9_cast1_fu_217_p1;

always @ (posedge ap_clk) begin
    tmp_2_reg_337[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    tmp_2_cast_reg_342[26:13] <= 14'b00000000000000;
end

endmodule //fullyConnected
