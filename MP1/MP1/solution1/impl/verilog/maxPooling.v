// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module maxPooling (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] input_V_address0;
output   input_V_ce0;
input  [15:0] input_V_q0;
output  [16:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [15:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg[16:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[15:0] output_V_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] next_mul_fu_325_p2;
reg   [11:0] next_mul_reg_779;
wire    ap_CS_fsm_state2;
wire   [6:0] c_1_fu_337_p2;
reg   [6:0] c_1_reg_787;
wire   [4:0] i_1_fu_349_p2;
reg   [4:0] i_1_reg_795;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_3_fu_389_p2;
reg   [63:0] tmp_3_reg_800;
wire   [0:0] exitcond3_fu_343_p2;
wire   [4:0] j_1_fu_401_p2;
wire    ap_CS_fsm_state4;
wire   [11:0] next_mul1_fu_434_p2;
reg   [11:0] next_mul1_reg_814;
wire    ap_CS_fsm_state5;
wire   [12:0] next_mul9_fu_440_p2;
reg   [12:0] next_mul9_reg_819;
wire   [6:0] c_2_fu_452_p2;
reg   [6:0] c_2_reg_827;
wire   [4:0] i_2_fu_464_p2;
reg   [4:0] i_2_reg_835;
wire    ap_CS_fsm_state6;
wire   [5:0] tmp_5_fu_470_p3;
reg   [5:0] tmp_5_reg_840;
wire   [0:0] exitcond4_fu_458_p2;
wire   [63:0] tmp_9_fu_512_p2;
reg   [63:0] tmp_9_reg_845;
wire   [4:0] j_2_fu_524_p2;
reg   [4:0] j_2_reg_854;
wire    ap_CS_fsm_state7;
wire   [5:0] tmp_s_fu_530_p3;
reg   [5:0] tmp_s_reg_859;
wire   [0:0] exitcond6_fu_518_p2;
wire   [1:0] pi_1_fu_548_p2;
reg   [1:0] pi_1_reg_867;
wire    ap_CS_fsm_state8;
wire   [4:0] tmp_16_fu_570_p2;
reg   [4:0] tmp_16_reg_872;
wire   [0:0] exitcond7_fu_542_p2;
wire   [19:0] tmp_19_fu_611_p2;
reg   [19:0] tmp_19_reg_877;
wire   [1:0] pj_1_fu_627_p2;
reg   [1:0] pj_1_reg_885;
wire    ap_CS_fsm_state9;
wire   [4:0] tmp_26_fu_637_p2;
reg   [4:0] tmp_26_reg_890;
wire   [0:0] exitcond_fu_621_p2;
wire   [15:0] pool_values_V_q0;
wire    ap_CS_fsm_state11;
wire   [1:0] i_3_fu_671_p2;
reg   [1:0] i_3_reg_909;
wire    ap_CS_fsm_state12;
wire   [4:0] tmp_25_fu_693_p2;
reg   [4:0] tmp_25_reg_914;
wire   [0:0] exitcond3_i_fu_665_p2;
wire   [1:0] j_3_fu_732_p2;
reg   [1:0] j_3_reg_922;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond_i_fu_726_p2;
wire   [15:0] max_value_V_1_agg_re_fu_758_p3;
wire    ap_CS_fsm_state14;
wire   [15:0] max_value_V_1_agg_re_1_fu_766_p3;
reg   [3:0] pool_values_V_address0;
reg    pool_values_V_ce0;
reg    pool_values_V_we0;
reg   [6:0] c_reg_133;
reg   [11:0] phi_mul_reg_144;
reg   [4:0] i_reg_156;
wire   [0:0] exitcond5_fu_395_p2;
wire   [0:0] exitcond1_fu_331_p2;
reg   [4:0] j_reg_167;
reg   [6:0] c4_reg_178;
reg   [12:0] phi_mul8_reg_189;
reg   [11:0] phi_mul1_reg_201;
reg   [4:0] i5_reg_213;
wire   [0:0] exitcond2_fu_446_p2;
reg   [4:0] j6_reg_224;
reg   [1:0] pi_reg_236;
reg   [1:0] pj_reg_247;
wire    ap_CS_fsm_state10;
reg   [15:0] max_value_V_1_reg_258;
reg   [15:0] agg_result_V_load4_i_reg_269;
reg   [1:0] i_i_reg_279;
reg   [15:0] agg_result_V_1_i_reg_290;
reg   [15:0] agg_result_V_load_i_reg_302;
reg   [1:0] j_i_reg_314;
wire   [63:0] tmp_14_fu_425_p3;
wire   [63:0] tmp_39_cast_fu_656_p1;
wire  signed [63:0] tmp_38_cast_fu_661_p1;
wire   [63:0] tmp_23_fu_717_p3;
wire  signed [63:0] tmp_40_cast_fu_747_p1;
wire   [11:0] tmp_3_cast_fu_355_p1;
wire   [11:0] tmp_1_fu_359_p2;
wire   [18:0] tmp_fu_365_p3;
wire   [16:0] tmp_2_fu_377_p3;
wire   [63:0] p_shl_fu_373_p1;
wire   [63:0] p_shl1_fu_385_p1;
wire   [4:0] tmp_10_fu_407_p1;
wire   [58:0] tmp_13_fu_416_p4;
wire   [4:0] tmp_12_fu_410_p2;
wire   [11:0] tmp_6_cast_fu_478_p1;
wire   [11:0] tmp_4_fu_482_p2;
wire   [18:0] tmp_6_fu_488_p3;
wire   [16:0] tmp_8_fu_500_p3;
wire   [63:0] p_shl2_fu_496_p1;
wire   [63:0] p_shl3_fu_508_p1;
wire   [3:0] tmp_15_fu_558_p3;
wire   [4:0] p_shl6_cast_fu_566_p1;
wire   [4:0] tmp_4_cast_fu_554_p1;
wire   [5:0] pi_cast6_fu_538_p1;
wire   [5:0] tmp_7_fu_576_p2;
wire   [12:0] tmp_9_cast_fu_581_p1;
wire   [12:0] tmp_17_fu_585_p2;
wire   [17:0] tmp_18_fu_599_p3;
wire   [19:0] p_shl4_cast_fu_591_p3;
wire   [19:0] p_shl5_cast_fu_607_p1;
wire   [4:0] tmp_10_cast_fu_633_p1;
wire   [5:0] pj_cast4_fu_617_p1;
wire   [5:0] tmp_11_fu_642_p2;
wire   [19:0] tmp_12_cast_fu_647_p1;
wire   [19:0] tmp_27_fu_651_p2;
wire   [3:0] tmp_24_fu_681_p3;
wire   [4:0] p_shl7_cast_fu_689_p1;
wire   [4:0] tmp_i_cast_fu_677_p1;
wire   [4:0] tmp_20_fu_699_p1;
wire   [58:0] tmp_22_fu_708_p4;
wire   [4:0] tmp_21_fu_702_p2;
wire   [4:0] tmp_i_cast_14_fu_738_p1;
wire   [4:0] tmp_28_fu_742_p2;
wire   [0:0] tmp_13_i_fu_752_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

maxPooling_pool_vbkb #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
pool_values_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool_values_V_address0),
    .ce0(pool_values_V_ce0),
    .we0(pool_values_V_we0),
    .d0(input_V_q0),
    .q0(pool_values_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        agg_result_V_1_i_reg_290 <= max_value_V_1_agg_re_fu_758_p3;
    end else if (((exitcond3_i_fu_665_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        agg_result_V_1_i_reg_290 <= max_value_V_1_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond_i_fu_726_p2 == 1'd1))) begin
        agg_result_V_load4_i_reg_269 <= agg_result_V_load_i_reg_302;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        agg_result_V_load4_i_reg_269 <= pool_values_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        agg_result_V_load_i_reg_302 <= max_value_V_1_agg_re_1_fu_766_p3;
    end else if (((exitcond3_i_fu_665_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        agg_result_V_load_i_reg_302 <= agg_result_V_load4_i_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_331_p2 == 1'd1))) begin
        c4_reg_178 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_458_p2 == 1'd1))) begin
        c4_reg_178 <= c_2_reg_827;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_reg_133 <= c_1_reg_787;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_133 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i5_reg_213 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond6_fu_518_p2 == 1'd1))) begin
        i5_reg_213 <= i_2_reg_835;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond_i_fu_726_p2 == 1'd1))) begin
        i_i_reg_279 <= i_3_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_i_reg_279 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_156 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_395_p2 == 1'd1))) begin
        i_reg_156 <= i_1_reg_795;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j6_reg_224 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond3_i_fu_665_p2 == 1'd1))) begin
        j6_reg_224 <= j_2_reg_854;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_i_reg_314 <= j_3_reg_922;
    end else if (((exitcond3_i_fu_665_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        j_i_reg_314 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_167 <= 5'd0;
    end else if (((exitcond5_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_167 <= j_1_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond_i_fu_726_p2 == 1'd1))) begin
        max_value_V_1_reg_258 <= agg_result_V_1_i_reg_290;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        max_value_V_1_reg_258 <= pool_values_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_331_p2 == 1'd1))) begin
        phi_mul1_reg_201 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_458_p2 == 1'd1))) begin
        phi_mul1_reg_201 <= next_mul1_reg_814;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_331_p2 == 1'd1))) begin
        phi_mul8_reg_189 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_458_p2 == 1'd1))) begin
        phi_mul8_reg_189 <= next_mul9_reg_819;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_144 <= next_mul_reg_779;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_144 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_621_p2 == 1'd1))) begin
        pi_reg_236 <= pi_1_reg_867;
    end else if (((exitcond6_fu_518_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        pi_reg_236 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_542_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        pj_reg_247 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pj_reg_247 <= pj_1_reg_885;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_1_reg_787 <= c_1_fu_337_p2;
        next_mul_reg_779 <= next_mul_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_2_reg_827 <= c_2_fu_452_p2;
        next_mul1_reg_814 <= next_mul1_fu_434_p2;
        next_mul9_reg_819 <= next_mul9_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_795 <= i_1_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_835 <= i_2_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_3_reg_909 <= i_3_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_854 <= j_2_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_3_reg_922 <= j_3_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pi_1_reg_867 <= pi_1_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pj_1_reg_885 <= pj_1_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_542_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_16_reg_872 <= tmp_16_fu_570_p2;
        tmp_19_reg_877[19 : 5] <= tmp_19_fu_611_p2[19 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_i_fu_665_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_25_reg_914 <= tmp_25_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_621_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_26_reg_890 <= tmp_26_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_3_reg_800[63 : 5] <= tmp_3_fu_389_p2[63 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_5_reg_840[5 : 1] <= tmp_5_fu_470_p3[5 : 1];
        tmp_9_reg_845[63 : 5] <= tmp_9_fu_512_p2[63 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_518_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_s_reg_859[5 : 1] <= tmp_s_fu_530_p3[5 : 1];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_446_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_446_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_V_address0 = tmp_23_fu_717_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_address0 = tmp_14_fu_425_p3;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_V_d0 = max_value_V_1_reg_258;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_d0 = 16'd0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond5_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state12) & (exitcond3_i_fu_665_p2 == 1'd1)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pool_values_V_address0 = tmp_40_cast_fu_747_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_values_V_address0 = tmp_38_cast_fu_661_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pool_values_V_address0 = 64'd0;
    end else begin
        pool_values_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        pool_values_V_ce0 = 1'b1;
    end else begin
        pool_values_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_values_V_we0 = 1'b1;
    end else begin
        pool_values_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_343_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_395_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_446_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_458_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond6_fu_518_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond7_fu_542_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_621_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond3_i_fu_665_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond_i_fu_726_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_1_fu_337_p2 = (c_reg_133 + 7'd1);

assign c_2_fu_452_p2 = (c4_reg_178 + 7'd1);

assign exitcond1_fu_331_p2 = ((c_reg_133 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond2_fu_446_p2 = ((c4_reg_178 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond3_fu_343_p2 = ((i_reg_156 == 5'd27) ? 1'b1 : 1'b0);

assign exitcond3_i_fu_665_p2 = ((i_i_reg_279 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_458_p2 = ((i5_reg_213 == 5'd27) ? 1'b1 : 1'b0);

assign exitcond5_fu_395_p2 = ((j_reg_167 == 5'd27) ? 1'b1 : 1'b0);

assign exitcond6_fu_518_p2 = ((j6_reg_224 == 5'd27) ? 1'b1 : 1'b0);

assign exitcond7_fu_542_p2 = ((pi_reg_236 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_621_p2 = ((pj_reg_247 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i_fu_726_p2 = ((j_i_reg_314 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_349_p2 = (i_reg_156 + 5'd1);

assign i_2_fu_464_p2 = (i5_reg_213 + 5'd1);

assign i_3_fu_671_p2 = (i_i_reg_279 + 2'd1);

assign input_V_address0 = tmp_39_cast_fu_656_p1;

assign j_1_fu_401_p2 = (j_reg_167 + 5'd1);

assign j_2_fu_524_p2 = (j6_reg_224 + 5'd1);

assign j_3_fu_732_p2 = (j_i_reg_314 + 2'd1);

assign max_value_V_1_agg_re_1_fu_766_p3 = ((tmp_13_i_fu_752_p2[0:0] === 1'b1) ? pool_values_V_q0 : agg_result_V_load_i_reg_302);

assign max_value_V_1_agg_re_fu_758_p3 = ((tmp_13_i_fu_752_p2[0:0] === 1'b1) ? pool_values_V_q0 : agg_result_V_1_i_reg_290);

assign next_mul1_fu_434_p2 = (phi_mul1_reg_201 + 12'd27);

assign next_mul9_fu_440_p2 = (phi_mul8_reg_189 + 13'd55);

assign next_mul_fu_325_p2 = (phi_mul_reg_144 + 12'd27);

assign p_shl1_fu_385_p1 = tmp_2_fu_377_p3;

assign p_shl2_fu_496_p1 = tmp_6_fu_488_p3;

assign p_shl3_fu_508_p1 = tmp_8_fu_500_p3;

assign p_shl4_cast_fu_591_p3 = {{tmp_17_fu_585_p2}, {7'd0}};

assign p_shl5_cast_fu_607_p1 = tmp_18_fu_599_p3;

assign p_shl6_cast_fu_566_p1 = tmp_15_fu_558_p3;

assign p_shl7_cast_fu_689_p1 = tmp_24_fu_681_p3;

assign p_shl_fu_373_p1 = tmp_fu_365_p3;

assign pi_1_fu_548_p2 = (pi_reg_236 + 2'd1);

assign pi_cast6_fu_538_p1 = pi_reg_236;

assign pj_1_fu_627_p2 = (pj_reg_247 + 2'd1);

assign pj_cast4_fu_617_p1 = pj_reg_247;

assign tmp_10_cast_fu_633_p1 = pj_reg_247;

assign tmp_10_fu_407_p1 = tmp_3_reg_800[4:0];

assign tmp_11_fu_642_p2 = (pj_cast4_fu_617_p1 + tmp_s_reg_859);

assign tmp_12_cast_fu_647_p1 = tmp_11_fu_642_p2;

assign tmp_12_fu_410_p2 = (tmp_10_fu_407_p1 | j_reg_167);

assign tmp_13_fu_416_p4 = {{tmp_3_reg_800[63:5]}};

assign tmp_13_i_fu_752_p2 = (($signed(pool_values_V_q0) > $signed(agg_result_V_load_i_reg_302)) ? 1'b1 : 1'b0);

assign tmp_14_fu_425_p3 = {{tmp_13_fu_416_p4}, {tmp_12_fu_410_p2}};

assign tmp_15_fu_558_p3 = {{pi_reg_236}, {2'd0}};

assign tmp_16_fu_570_p2 = (p_shl6_cast_fu_566_p1 - tmp_4_cast_fu_554_p1);

assign tmp_17_fu_585_p2 = (tmp_9_cast_fu_581_p1 + phi_mul8_reg_189);

assign tmp_18_fu_599_p3 = {{tmp_17_fu_585_p2}, {5'd0}};

assign tmp_19_fu_611_p2 = (p_shl4_cast_fu_591_p3 - p_shl5_cast_fu_607_p1);

assign tmp_1_fu_359_p2 = (phi_mul_reg_144 + tmp_3_cast_fu_355_p1);

assign tmp_20_fu_699_p1 = tmp_9_reg_845[4:0];

assign tmp_21_fu_702_p2 = (tmp_20_fu_699_p1 | j6_reg_224);

assign tmp_22_fu_708_p4 = {{tmp_9_reg_845[63:5]}};

assign tmp_23_fu_717_p3 = {{tmp_22_fu_708_p4}, {tmp_21_fu_702_p2}};

assign tmp_24_fu_681_p3 = {{i_i_reg_279}, {2'd0}};

assign tmp_25_fu_693_p2 = (p_shl7_cast_fu_689_p1 - tmp_i_cast_fu_677_p1);

assign tmp_26_fu_637_p2 = (tmp_16_reg_872 + tmp_10_cast_fu_633_p1);

assign tmp_27_fu_651_p2 = (tmp_19_reg_877 + tmp_12_cast_fu_647_p1);

assign tmp_28_fu_742_p2 = (tmp_25_reg_914 + tmp_i_cast_14_fu_738_p1);

assign tmp_2_fu_377_p3 = {{tmp_1_fu_359_p2}, {5'd0}};

assign tmp_38_cast_fu_661_p1 = $signed(tmp_26_reg_890);

assign tmp_39_cast_fu_656_p1 = tmp_27_fu_651_p2;

assign tmp_3_cast_fu_355_p1 = i_reg_156;

assign tmp_3_fu_389_p2 = (p_shl_fu_373_p1 - p_shl1_fu_385_p1);

assign tmp_40_cast_fu_747_p1 = $signed(tmp_28_fu_742_p2);

assign tmp_4_cast_fu_554_p1 = pi_reg_236;

assign tmp_4_fu_482_p2 = (tmp_6_cast_fu_478_p1 + phi_mul1_reg_201);

assign tmp_5_fu_470_p3 = {{i5_reg_213}, {1'd0}};

assign tmp_6_cast_fu_478_p1 = i5_reg_213;

assign tmp_6_fu_488_p3 = {{tmp_4_fu_482_p2}, {7'd0}};

assign tmp_7_fu_576_p2 = (tmp_5_reg_840 + pi_cast6_fu_538_p1);

assign tmp_8_fu_500_p3 = {{tmp_4_fu_482_p2}, {5'd0}};

assign tmp_9_cast_fu_581_p1 = tmp_7_fu_576_p2;

assign tmp_9_fu_512_p2 = (p_shl2_fu_496_p1 - p_shl3_fu_508_p1);

assign tmp_fu_365_p3 = {{tmp_1_fu_359_p2}, {7'd0}};

assign tmp_i_cast_14_fu_738_p1 = j_i_reg_314;

assign tmp_i_cast_fu_677_p1 = i_i_reg_279;

assign tmp_s_fu_530_p3 = {{j6_reg_224}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_3_reg_800[4:0] <= 5'b00000;
    tmp_5_reg_840[0] <= 1'b0;
    tmp_9_reg_845[4:0] <= 5'b00000;
    tmp_s_reg_859[0] <= 1'b0;
    tmp_19_reg_877[4:0] <= 5'b00000;
end

endmodule //maxPooling
