// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _main_HH_
#define _main_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "maxPooling.h"
#include "main_convolutionOcud.h"
#include "main_poolingResuldEe.h"

namespace ap_rtl {

struct main : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    main(sc_module_name name);
    SC_HAS_PROCESS(main);

    ~main();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    main_convolutionOcud* convolutionOutput_V_U;
    main_poolingResuldEe* poolingResult_V_U;
    maxPooling* grp_maxPooling_fu_20;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > convolutionOutput_V_q0;
    sc_signal< sc_logic > grp_maxPooling_fu_20_ap_start;
    sc_signal< sc_logic > grp_maxPooling_fu_20_ap_done;
    sc_signal< sc_logic > grp_maxPooling_fu_20_ap_idle;
    sc_signal< sc_logic > grp_maxPooling_fu_20_ap_ready;
    sc_signal< sc_lv<19> > grp_maxPooling_fu_20_input_V_address0;
    sc_signal< sc_logic > grp_maxPooling_fu_20_input_V_ce0;
    sc_signal< sc_lv<17> > grp_maxPooling_fu_20_output_V_address0;
    sc_signal< sc_logic > grp_maxPooling_fu_20_output_V_ce0;
    sc_signal< sc_logic > grp_maxPooling_fu_20_output_V_we0;
    sc_signal< sc_lv<16> > grp_maxPooling_fu_20_output_V_d0;
    sc_signal< sc_logic > grp_maxPooling_fu_20_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_maxPooling_fu_20_ap_start();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
