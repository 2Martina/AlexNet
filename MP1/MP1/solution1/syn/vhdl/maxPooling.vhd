-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxPooling is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of maxPooling is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_1B : STD_LOGIC_VECTOR (11 downto 0) := "000000011011";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv13_37 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_779 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_1_fu_337_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_1_reg_787 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_795 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_389_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_800 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_mul1_fu_434_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul1_reg_814 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal next_mul9_fu_440_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul9_reg_819 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_2_fu_452_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_2_reg_827 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_835 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_5_fu_470_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_840 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_845 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_524_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_854 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_s_fu_530_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_859 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pi_1_fu_548_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal pi_1_reg_867 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_16_fu_570_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_reg_872 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_611_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_19_reg_877 : STD_LOGIC_VECTOR (19 downto 0);
    signal pj_1_fu_627_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal pj_1_reg_885 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_26_fu_637_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_reg_890 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_values_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_3_fu_671_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_909 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_25_fu_693_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_reg_914 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_i_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_732_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_922 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_i_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_value_V_1_agg_re_fu_758_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal max_value_V_1_agg_re_1_fu_766_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_values_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal pool_values_V_ce0 : STD_LOGIC;
    signal pool_values_V_we0 : STD_LOGIC;
    signal c_reg_133 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_144 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_156 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond5_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_167 : STD_LOGIC_VECTOR (4 downto 0);
    signal c4_reg_178 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul8_reg_189 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_mul1_reg_201 : STD_LOGIC_VECTOR (11 downto 0);
    signal i5_reg_213 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j6_reg_224 : STD_LOGIC_VECTOR (4 downto 0);
    signal pi_reg_236 : STD_LOGIC_VECTOR (1 downto 0);
    signal pj_reg_247 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal max_value_V_1_reg_258 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_V_load4_i_reg_269 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_reg_279 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_V_1_i_reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_V_load_i_reg_302 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_i_reg_314 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_425_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_717_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_355_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_359_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_365_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_fu_377_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_407_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_416_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_12_fu_410_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_478_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_482_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_488_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_fu_500_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl2_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl3_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_558_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl6_cast_fu_566_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_554_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal pi_cast6_fu_538_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_576_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast_fu_581_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_fu_585_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_fu_599_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl4_cast_fu_591_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl5_cast_fu_607_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_cast_fu_633_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal pj_cast4_fu_617_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_642_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_cast_fu_647_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_27_fu_651_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_24_fu_681_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl7_cast_fu_689_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_cast_fu_677_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_699_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_708_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_21_fu_702_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_cast_14_fu_738_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_742_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_i_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component maxPooling_pool_vbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    pool_values_V_U : component maxPooling_pool_vbkb
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool_values_V_address0,
        ce0 => pool_values_V_ce0,
        we0 => pool_values_V_we0,
        d0 => input_V_q0,
        q0 => pool_values_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    agg_result_V_1_i_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                agg_result_V_1_i_reg_290 <= max_value_V_1_agg_re_fu_758_p3;
            elsif (((exitcond3_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                agg_result_V_1_i_reg_290 <= max_value_V_1_reg_258;
            end if; 
        end if;
    end process;

    agg_result_V_load4_i_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i_fu_726_p2 = ap_const_lv1_1))) then 
                agg_result_V_load4_i_reg_269 <= agg_result_V_load_i_reg_302;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                agg_result_V_load4_i_reg_269 <= pool_values_V_q0;
            end if; 
        end if;
    end process;

    agg_result_V_load_i_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                agg_result_V_load_i_reg_302 <= max_value_V_1_agg_re_1_fu_766_p3;
            elsif (((exitcond3_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                agg_result_V_load_i_reg_302 <= agg_result_V_load4_i_reg_269;
            end if; 
        end if;
    end process;

    c4_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_331_p2 = ap_const_lv1_1))) then 
                c4_reg_178 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_458_p2 = ap_const_lv1_1))) then 
                c4_reg_178 <= c_2_reg_827;
            end if; 
        end if;
    end process;

    c_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_reg_133 <= c_1_reg_787;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_133 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i5_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i5_reg_213 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_fu_518_p2 = ap_const_lv1_1))) then 
                i5_reg_213 <= i_2_reg_835;
            end if; 
        end if;
    end process;

    i_i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i_fu_726_p2 = ap_const_lv1_1))) then 
                i_i_reg_279 <= i_3_reg_909;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i_reg_279 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_156 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_395_p2 = ap_const_lv1_1))) then 
                i_reg_156 <= i_1_reg_795;
            end if; 
        end if;
    end process;

    j6_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j6_reg_224 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond3_i_fu_665_p2 = ap_const_lv1_1))) then 
                j6_reg_224 <= j_2_reg_854;
            end if; 
        end if;
    end process;

    j_i_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_i_reg_314 <= j_3_reg_922;
            elsif (((exitcond3_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_i_reg_314 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_167 <= ap_const_lv5_0;
            elsif (((exitcond5_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_167 <= j_1_fu_401_p2;
            end if; 
        end if;
    end process;

    max_value_V_1_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i_fu_726_p2 = ap_const_lv1_1))) then 
                max_value_V_1_reg_258 <= agg_result_V_1_i_reg_290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                max_value_V_1_reg_258 <= pool_values_V_q0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_331_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_201 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_458_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_201 <= next_mul1_reg_814;
            end if; 
        end if;
    end process;

    phi_mul8_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_331_p2 = ap_const_lv1_1))) then 
                phi_mul8_reg_189 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_458_p2 = ap_const_lv1_1))) then 
                phi_mul8_reg_189 <= next_mul9_reg_819;
            end if; 
        end if;
    end process;

    phi_mul_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_144 <= next_mul_reg_779;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_144 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    pi_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_621_p2 = ap_const_lv1_1))) then 
                pi_reg_236 <= pi_1_reg_867;
            elsif (((exitcond6_fu_518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                pi_reg_236 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    pj_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_542_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                pj_reg_247 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                pj_reg_247 <= pj_1_reg_885;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_1_reg_787 <= c_1_fu_337_p2;
                next_mul_reg_779 <= next_mul_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                c_2_reg_827 <= c_2_fu_452_p2;
                next_mul1_reg_814 <= next_mul1_fu_434_p2;
                next_mul9_reg_819 <= next_mul9_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_795 <= i_1_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_835 <= i_2_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_3_reg_909 <= i_3_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_2_reg_854 <= j_2_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_3_reg_922 <= j_3_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                pi_1_reg_867 <= pi_1_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                pj_1_reg_885 <= pj_1_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_542_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_16_reg_872 <= tmp_16_fu_570_p2;
                    tmp_19_reg_877(19 downto 5) <= tmp_19_fu_611_p2(19 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_i_fu_665_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_25_reg_914 <= tmp_25_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_26_reg_890 <= tmp_26_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_3_reg_800(63 downto 5) <= tmp_3_fu_389_p2(63 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_5_reg_840(5 downto 1) <= tmp_5_fu_470_p3(5 downto 1);
                    tmp_9_reg_845(63 downto 5) <= tmp_9_fu_512_p2(63 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_s_reg_859(5 downto 1) <= tmp_s_fu_530_p3(5 downto 1);
            end if;
        end if;
    end process;
    tmp_3_reg_800(4 downto 0) <= "00000";
    tmp_5_reg_840(0) <= '0';
    tmp_9_reg_845(4 downto 0) <= "00000";
    tmp_s_reg_859(0) <= '0';
    tmp_19_reg_877(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_343_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond4_fu_458_p2, ap_CS_fsm_state7, exitcond6_fu_518_p2, ap_CS_fsm_state8, exitcond7_fu_542_p2, ap_CS_fsm_state9, exitcond_fu_621_p2, ap_CS_fsm_state12, exitcond3_i_fu_665_p2, ap_CS_fsm_state13, exitcond_i_fu_726_p2, exitcond5_fu_395_p2, exitcond1_fu_331_p2, exitcond2_fu_446_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_395_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_446_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_458_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_fu_518_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond7_fu_542_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_621_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond3_i_fu_665_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i_fu_726_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond2_fu_446_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_446_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_446_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_446_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_337_p2 <= std_logic_vector(unsigned(c_reg_133) + unsigned(ap_const_lv7_1));
    c_2_fu_452_p2 <= std_logic_vector(unsigned(c4_reg_178) + unsigned(ap_const_lv7_1));
    exitcond1_fu_331_p2 <= "1" when (c_reg_133 = ap_const_lv7_60) else "0";
    exitcond2_fu_446_p2 <= "1" when (c4_reg_178 = ap_const_lv7_60) else "0";
    exitcond3_fu_343_p2 <= "1" when (i_reg_156 = ap_const_lv5_1B) else "0";
    exitcond3_i_fu_665_p2 <= "1" when (i_i_reg_279 = ap_const_lv2_3) else "0";
    exitcond4_fu_458_p2 <= "1" when (i5_reg_213 = ap_const_lv5_1B) else "0";
    exitcond5_fu_395_p2 <= "1" when (j_reg_167 = ap_const_lv5_1B) else "0";
    exitcond6_fu_518_p2 <= "1" when (j6_reg_224 = ap_const_lv5_1B) else "0";
    exitcond7_fu_542_p2 <= "1" when (pi_reg_236 = ap_const_lv2_3) else "0";
    exitcond_fu_621_p2 <= "1" when (pj_reg_247 = ap_const_lv2_3) else "0";
    exitcond_i_fu_726_p2 <= "1" when (j_i_reg_314 = ap_const_lv2_3) else "0";
    i_1_fu_349_p2 <= std_logic_vector(unsigned(i_reg_156) + unsigned(ap_const_lv5_1));
    i_2_fu_464_p2 <= std_logic_vector(unsigned(i5_reg_213) + unsigned(ap_const_lv5_1));
    i_3_fu_671_p2 <= std_logic_vector(unsigned(i_i_reg_279) + unsigned(ap_const_lv2_1));
    input_V_address0 <= tmp_39_cast_fu_656_p1(19 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_401_p2 <= std_logic_vector(unsigned(j_reg_167) + unsigned(ap_const_lv5_1));
    j_2_fu_524_p2 <= std_logic_vector(unsigned(j6_reg_224) + unsigned(ap_const_lv5_1));
    j_3_fu_732_p2 <= std_logic_vector(unsigned(j_i_reg_314) + unsigned(ap_const_lv2_1));
    max_value_V_1_agg_re_1_fu_766_p3 <= 
        pool_values_V_q0 when (tmp_13_i_fu_752_p2(0) = '1') else 
        agg_result_V_load_i_reg_302;
    max_value_V_1_agg_re_fu_758_p3 <= 
        pool_values_V_q0 when (tmp_13_i_fu_752_p2(0) = '1') else 
        agg_result_V_1_i_reg_290;
    next_mul1_fu_434_p2 <= std_logic_vector(unsigned(phi_mul1_reg_201) + unsigned(ap_const_lv12_1B));
    next_mul9_fu_440_p2 <= std_logic_vector(unsigned(phi_mul8_reg_189) + unsigned(ap_const_lv13_37));
    next_mul_fu_325_p2 <= std_logic_vector(unsigned(phi_mul_reg_144) + unsigned(ap_const_lv12_1B));

    output_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, tmp_14_fu_425_p3, tmp_23_fu_717_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_V_address0 <= tmp_23_fu_717_p3(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address0 <= tmp_14_fu_425_p3(17 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, max_value_V_1_reg_258)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_V_d0 <= max_value_V_1_reg_258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_d0 <= ap_const_lv16_0;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, exitcond3_i_fu_665_p2, exitcond5_fu_395_p2)
    begin
        if ((((exitcond5_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond3_i_fu_665_p2 = ap_const_lv1_1)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_377_p3),64));
    p_shl2_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_488_p3),64));
    p_shl3_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_500_p3),64));
    p_shl4_cast_fu_591_p3 <= (tmp_17_fu_585_p2 & ap_const_lv7_0);
    p_shl5_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_599_p3),20));
    p_shl6_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_558_p3),5));
    p_shl7_cast_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_681_p3),5));
    p_shl_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_365_p3),64));
    pi_1_fu_548_p2 <= std_logic_vector(unsigned(pi_reg_236) + unsigned(ap_const_lv2_1));
    pi_cast6_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pi_reg_236),6));
    pj_1_fu_627_p2 <= std_logic_vector(unsigned(pj_reg_247) + unsigned(ap_const_lv2_1));
    pj_cast4_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pj_reg_247),6));

    pool_values_V_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state10, tmp_38_cast_fu_661_p1, tmp_40_cast_fu_747_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pool_values_V_address0 <= tmp_40_cast_fu_747_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_values_V_address0 <= tmp_38_cast_fu_661_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pool_values_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            pool_values_V_address0 <= "XXXX";
        end if; 
    end process;


    pool_values_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pool_values_V_ce0 <= ap_const_logic_1;
        else 
            pool_values_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_values_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_values_V_we0 <= ap_const_logic_1;
        else 
            pool_values_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pj_reg_247),5));
    tmp_10_fu_407_p1 <= tmp_3_reg_800(5 - 1 downto 0);
    tmp_11_fu_642_p2 <= std_logic_vector(unsigned(pj_cast4_fu_617_p1) + unsigned(tmp_s_reg_859));
    tmp_12_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_642_p2),20));
    tmp_12_fu_410_p2 <= (tmp_10_fu_407_p1 or j_reg_167);
    tmp_13_fu_416_p4 <= tmp_3_reg_800(63 downto 5);
    tmp_13_i_fu_752_p2 <= "1" when (signed(pool_values_V_q0) > signed(agg_result_V_load_i_reg_302)) else "0";
    tmp_14_fu_425_p3 <= (tmp_13_fu_416_p4 & tmp_12_fu_410_p2);
    tmp_15_fu_558_p3 <= (pi_reg_236 & ap_const_lv2_0);
    tmp_16_fu_570_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_566_p1) - unsigned(tmp_4_cast_fu_554_p1));
    tmp_17_fu_585_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_581_p1) + unsigned(phi_mul8_reg_189));
    tmp_18_fu_599_p3 <= (tmp_17_fu_585_p2 & ap_const_lv5_0);
    tmp_19_fu_611_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_591_p3) - unsigned(p_shl5_cast_fu_607_p1));
    tmp_1_fu_359_p2 <= std_logic_vector(unsigned(phi_mul_reg_144) + unsigned(tmp_3_cast_fu_355_p1));
    tmp_20_fu_699_p1 <= tmp_9_reg_845(5 - 1 downto 0);
    tmp_21_fu_702_p2 <= (tmp_20_fu_699_p1 or j6_reg_224);
    tmp_22_fu_708_p4 <= tmp_9_reg_845(63 downto 5);
    tmp_23_fu_717_p3 <= (tmp_22_fu_708_p4 & tmp_21_fu_702_p2);
    tmp_24_fu_681_p3 <= (i_i_reg_279 & ap_const_lv2_0);
    tmp_25_fu_693_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_689_p1) - unsigned(tmp_i_cast_fu_677_p1));
    tmp_26_fu_637_p2 <= std_logic_vector(unsigned(tmp_16_reg_872) + unsigned(tmp_10_cast_fu_633_p1));
    tmp_27_fu_651_p2 <= std_logic_vector(unsigned(tmp_19_reg_877) + unsigned(tmp_12_cast_fu_647_p1));
    tmp_28_fu_742_p2 <= std_logic_vector(unsigned(tmp_25_reg_914) + unsigned(tmp_i_cast_14_fu_738_p1));
    tmp_2_fu_377_p3 <= (tmp_1_fu_359_p2 & ap_const_lv5_0);
        tmp_38_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_reg_890),64));

    tmp_39_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_651_p2),64));
    tmp_3_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_156),12));
    tmp_3_fu_389_p2 <= std_logic_vector(unsigned(p_shl_fu_373_p1) - unsigned(p_shl1_fu_385_p1));
        tmp_40_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_742_p2),64));

    tmp_4_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pi_reg_236),5));
    tmp_4_fu_482_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_478_p1) + unsigned(phi_mul1_reg_201));
    tmp_5_fu_470_p3 <= (i5_reg_213 & ap_const_lv1_0);
    tmp_6_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_213),12));
    tmp_6_fu_488_p3 <= (tmp_4_fu_482_p2 & ap_const_lv7_0);
    tmp_7_fu_576_p2 <= std_logic_vector(unsigned(tmp_5_reg_840) + unsigned(pi_cast6_fu_538_p1));
    tmp_8_fu_500_p3 <= (tmp_4_fu_482_p2 & ap_const_lv5_0);
    tmp_9_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_576_p2),13));
    tmp_9_fu_512_p2 <= std_logic_vector(unsigned(p_shl2_fu_496_p1) - unsigned(p_shl3_fu_508_p1));
    tmp_fu_365_p3 <= (tmp_1_fu_359_p2 & ap_const_lv7_0);
    tmp_i_cast_14_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_314),5));
    tmp_i_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_279),5));
    tmp_s_fu_530_p3 <= (j6_reg_224 & ap_const_lv1_0);
end behav;
